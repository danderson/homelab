#!/usr/bin/env bash
# -*- mode: shell-script -*-

set -euo pipefail

if [ $# -lt 2 ]; then
    echo "Usage: $0 host nixos-rebuild-args..."
    exit 1
fi

HOST=$1
shift

LOCALHOST="$(hostname)"


unstablepkgs="https://github.com/nixos/nixpkgs/archive/nixos-unstable.tar.gz" # where to find nixUnstable

nixargs=(--experimental-features "nix-command flakes ca-references recursive-nix")
# TODO: research post-build hooks?
buildargs=(
  --option 'narinfo-cache-negative-ttl' '0'
)
#  --option 'extra-binary-caches' 'https://cache.nixos.org'
#  --option 'trusted-public-keys' 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY='

function ssh_nix_unstable() {
  local r="${1}"; shift;
  ssh "root@${r}" -- "nix-shell -I nixpkgs=${unstablepkgs} -p nixUnstable --run '$(printf '\"%s\" ' "${@}")'"
}

push_build() {
    host=$1
    tgt=".#nixosConfigurations.${host}.config.system.build.toplevel"
    # Get the top-level system store path, and see if it already
    # exists on the remote. If it does, we can skip a whole bunch of
    # work.
    echo ":::::: eval $host" >&2
    out=$(nix "${nixargs[@]}" eval --raw "$tgt")
    echo ":::::: checking if already built on $host" >&2
    if ssh_nix_unstable "$host" test -d "$out"; then
	echo ":::::: cache hit on $host, not rebuilding" >&2
	echo "$out"
	return 0
    fi

    # Miss, need to instantiate derivations locally, copy them, and
    # realize them on the remote host.
    echo ":::::: instantiate $host" >&2
    drv=$(nix "${nixargs[@]}" eval --raw "${tgt}.drvPath")
    tmp="/tmp/tmpnixpath"
    echo ":::::: rsync $drv to $host" >&2
    nix "${nixargs[@]}" copy --to "file://${tmp}" --derivation "${drv}"
    rsync -ah "${tmp}/" "${host}:${tmp}"
    ssh_nix_unstable "$host" nix "${nixargs[@]}" copy --from file://"${tmp}" --derivation "${drv}"
    echo ":::::: build $drv on $host" >&2
    ssh_nix_unstable "$host" nix "${nixargs[@]}" build "${buildargs[@]}" "${drv}"
    echo "$out"
}

activate() {
    host=$1
    storePath=$2
    cmd=$3
    echo ":::::: activate $storePath ($cmd) on $host" >&2
    ssh_nix_unstable "$host" nix "${nixargs[@]}" build --profile /nix/var/nix/profiles/system "$storePath"
    ssh_nix_unstable "$host" nix "${nixargs[@]}" shell -vv "$storePath" -c switch-to-configuration "$cmd"
}

storePath=$(push_build "$HOST")
activate "$HOST" "$storePath" "$@"
